{
  "version": 3,
  "sources": ["../../nip44.ts"],
  "sourcesContent": ["import { chacha20 } from '@noble/ciphers/chacha'\nimport { equalBytes } from '@noble/ciphers/utils'\nimport { secp256k1 } from '@noble/curves/secp256k1'\nimport { extract as hkdf_extract, expand as hkdf_expand } from '@noble/hashes/hkdf'\nimport { hmac } from '@noble/hashes/hmac'\nimport { sha256 } from '@noble/hashes/sha256'\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils'\nimport { base64 } from '@scure/base'\n\nconst decoder = new TextDecoder()\n\nclass u {\n  static minPlaintextSize = 0x0001 // 1b msg => padded to 32b\n  static maxPlaintextSize = 0xffff // 65535 (64kb-1) => padded to 64kb\n\n  static utf8Encode = utf8ToBytes\n\n  static utf8Decode(bytes: Uint8Array): string {\n    return decoder.decode(bytes)\n  }\n\n  static getConversationKey(privkeyA: string, pubkeyB: string): Uint8Array {\n    const sharedX = secp256k1.getSharedSecret(privkeyA, '02' + pubkeyB).subarray(1, 33)\n    return hkdf_extract(sha256, sharedX, 'nip44-v2')\n  }\n\n  static getMessageKeys(\n    conversationKey: Uint8Array,\n    nonce: Uint8Array,\n  ): { chacha_key: Uint8Array; chacha_nonce: Uint8Array; hmac_key: Uint8Array } {\n    const keys = hkdf_expand(sha256, conversationKey, nonce, 76)\n    return {\n      chacha_key: keys.subarray(0, 32),\n      chacha_nonce: keys.subarray(32, 44),\n      hmac_key: keys.subarray(44, 76),\n    }\n  }\n\n  static calcPaddedLen(len: number): number {\n    if (!Number.isSafeInteger(len) || len < 1) throw new Error('expected positive integer')\n    if (len <= 32) return 32\n    const nextPower = 1 << (Math.floor(Math.log2(len - 1)) + 1)\n    const chunk = nextPower <= 256 ? 32 : nextPower / 8\n    return chunk * (Math.floor((len - 1) / chunk) + 1)\n  }\n\n  static writeU16BE(num: number): Uint8Array {\n    if (!Number.isSafeInteger(num) || num < u.minPlaintextSize || num > u.maxPlaintextSize)\n      throw new Error('invalid plaintext size: must be between 1 and 65535 bytes')\n    const arr = new Uint8Array(2)\n    new DataView(arr.buffer).setUint16(0, num, false)\n    return arr\n  }\n\n  static pad(plaintext: string): Uint8Array {\n    const unpadded = u.utf8Encode(plaintext)\n    const unpaddedLen = unpadded.length\n    const prefix = u.writeU16BE(unpaddedLen)\n    const suffix = new Uint8Array(u.calcPaddedLen(unpaddedLen) - unpaddedLen)\n    return concatBytes(prefix, unpadded, suffix)\n  }\n\n  static unpad(padded: Uint8Array): string {\n    const unpaddedLen = new DataView(padded.buffer).getUint16(0)\n    const unpadded = padded.subarray(2, 2 + unpaddedLen)\n    if (\n      unpaddedLen < u.minPlaintextSize ||\n      unpaddedLen > u.maxPlaintextSize ||\n      unpadded.length !== unpaddedLen ||\n      padded.length !== 2 + u.calcPaddedLen(unpaddedLen)\n    )\n      throw new Error('invalid padding')\n    return u.utf8Decode(unpadded)\n  }\n\n  static hmacAad(key: Uint8Array, message: Uint8Array, aad: Uint8Array): Uint8Array {\n    if (aad.length !== 32) throw new Error('AAD associated data must be 32 bytes')\n    const combined = concatBytes(aad, message)\n    return hmac(sha256, key, combined)\n  }\n\n  // metadata: always 65b (version: 1b, nonce: 32b, max: 32b)\n  // plaintext: 1b to 0xffff\n  // padded plaintext: 32b to 0xffff\n  // ciphertext: 32b+2 to 0xffff+2\n  // raw payload: 99 (65+32+2) to 65603 (65+0xffff+2)\n  // compressed payload (base64): 132b to 87472b\n  static decodePayload(payload: string): { nonce: Uint8Array; ciphertext: Uint8Array; mac: Uint8Array } {\n    if (typeof payload !== 'string') throw new Error('payload must be a valid string')\n    const plen = payload.length\n    if (plen < 132 || plen > 87472) throw new Error('invalid payload length: ' + plen)\n    if (payload[0] === '#') throw new Error('unknown encryption version')\n    let data: Uint8Array\n    try {\n      data = base64.decode(payload)\n    } catch (error) {\n      throw new Error('invalid base64: ' + (error as any).message)\n    }\n    const dlen = data.length\n    if (dlen < 99 || dlen > 65603) throw new Error('invalid data length: ' + dlen)\n    const vers = data[0]\n    if (vers !== 2) throw new Error('unknown encryption version ' + vers)\n    return {\n      nonce: data.subarray(1, 33),\n      ciphertext: data.subarray(33, -32),\n      mac: data.subarray(-32),\n    }\n  }\n}\n\nexport class v2 {\n  static utils = u\n\n  static encrypt(plaintext: string, conversationKey: Uint8Array, nonce: Uint8Array = randomBytes(32)): string {\n    const { chacha_key, chacha_nonce, hmac_key } = u.getMessageKeys(conversationKey, nonce)\n    const padded = u.pad(plaintext)\n    const ciphertext = chacha20(chacha_key, chacha_nonce, padded)\n    const mac = u.hmacAad(hmac_key, ciphertext, nonce)\n    return base64.encode(concatBytes(new Uint8Array([2]), nonce, ciphertext, mac))\n  }\n\n  static decrypt(payload: string, conversationKey: Uint8Array): string {\n    const { nonce, ciphertext, mac } = u.decodePayload(payload)\n    const { chacha_key, chacha_nonce, hmac_key } = u.getMessageKeys(conversationKey, nonce)\n    const calculatedMac = u.hmacAad(hmac_key, ciphertext, nonce)\n    if (!equalBytes(calculatedMac, mac)) throw new Error('invalid MAC')\n    const padded = chacha20(chacha_key, chacha_nonce, ciphertext)\n    return u.unpad(padded)\n  }\n}\n\nexport default { v2 }\n"],
  "mappings": "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",
  "names": []
}

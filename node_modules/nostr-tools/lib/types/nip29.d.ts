import { AbstractSimplePool } from './abstract-pool.ts';
import type { Event } from './core.ts';
export declare function subscribeRelayGroups(pool: AbstractSimplePool, url: string, params: {
    ongroups: (_: Group[]) => void;
    onerror: (_: Error) => void;
    onconnect?: () => void;
}): () => void;
export declare function loadGroup(pool: AbstractSimplePool, gr: GroupReference): Promise<Group>;
export declare function loadGroupFromCode(pool: AbstractSimplePool, code: string): Promise<Group>;
export type GroupReference = {
    id: string;
    host: string;
};
export declare function parseGroupCode(code: string): null | GroupReference;
export declare function encodeGroupReference(gr: GroupReference): string;
export type Group = {
    id: string;
    relay: string;
    pubkey: string;
    name?: string;
    picture?: string;
    about?: string;
    public?: boolean;
    open?: boolean;
};
export declare function parseGroup(event: Event, relay: string): Group;
export type Member = {
    pubkey: string;
    label?: string;
    permissions: string[];
};
export declare function parseMembers(event: Event): Member[];
